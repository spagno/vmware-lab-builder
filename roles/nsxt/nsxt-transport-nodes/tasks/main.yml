---
- ansible.builtin.debug: msg="Creating transport node profiles {{ nsxt.transport_node_profiles }}"

- name: Create transport node profile
  vmware.ansible_for_nsxt.nsxt_transport_node_profiles:
    hostname: "{{ nsxt.manager.hostname }}"
    username: "{{ nsxt.manager.username }}"
    password: "{{ nsxt.manager.password }}"
    validate_certs: false
    resource_type: TransportNodeProfile
    display_name: "{{ item.display_name }}"
    description: "{{ item.description }}"
    host_switch_spec:
      resource_type: StandardHostSwitchSpec
      host_switches: "{{ item.host_switches }}"
    transport_zone_endpoints: "{{ item.transport_zone_endpoints | default(omit) }}"
    state: present
  loop: "{{ nsxt.transport_node_profiles }}"

- ansible.builtin.debug: msg="Attaching transport node profiles {{ nsxt.cluster_attach }}"

- name: Attach Transport node profile to cluster
  vmware.ansible_for_nsxt.nsxt_transport_node_collections:
    hostname: "{{ nsxt.manager.hostname }}"
    username: "{{ nsxt.manager.username }}"
    password: "{{ nsxt.manager.password }}"
    validate_certs: false
    display_name: "{{ item.display_name }}"
    resource_type: "TransportNodeCollection"
    description: "{{ item.description }}"
    compute_manager_name: "{{ item.compute_manager_name }}"
    cluster_name: "{{ item.cluster_name }}"
    transport_node_profile_name: "{{ item.transport_node_profile_name }}"
    state: present
  loop: "{{ nsxt.cluster_attach }}"
  register: tnp_attach_result

- name: Waiting for cluster to configure
  vmware.ansible_for_nsxt.nsxt_transport_nodes_facts:
    hostname: "{{ nsxt.manager.hostname }}"
    username: "{{ nsxt.manager.username }}"
    password: "{{ nsxt.manager.password }}"
    validate_certs: false
  register: host_transport_node_facts
  retries: 120
  delay: 10
  until: host_transport_node_facts.results and host_transport_node_facts.results[0].node_deployment_info.managed_by_server

- ansible.builtin.debug: msg="Creating edge nodes {{ nsxt.edge_nodes }}"

- name: Waiting for vlan segments to propagate to the cluster
  ansible.builtin.pause:
    echo: false
    seconds: 30
  when: tnp_attach_result.changed

- name: Create transport node
  vmware.ansible_for_nsxt.nsxt_transport_nodes:
    hostname: "{{ nsxt.manager.hostname }}"
    username: "{{ nsxt.manager.username }}"
    password: "{{ nsxt.manager.password }}"
    validate_certs: false
    display_name: "{{ item.display_name }}"
    host_switch_spec:
      resource_type: "StandardHostSwitchSpec"
      host_switches:
        - host_switch_profiles:
            - name: "{{ item.host_switches.tep.uplink_profile_name }}"
              type: UplinkHostSwitchProfile
          host_switch_name: "{{ item.host_switches.tep.host_switch_name | default('defaultHostSwitch') }}"
          host_switch_mode: STANDARD
          transport_zone_endpoints: "{{ item.host_switches.tep.transport_zone_endpoints }}"
          pnics:
            - device_name: "fp-eth2"
              uplink_name: "uplink-1"
          ip_assignment_spec: "{{ item.host_switches.tep.ip_assignment_spec }}"
        - host_switch_profiles:
            - name: "{{ item.host_switches.uplink.uplink_profile_name }}"
              type: UplinkHostSwitchProfile
          host_switch_name: "{{ item.host_switches.uplink.host_switch_name }}"
          host_switch_mode: STANDARD
          transport_zone_endpoints: "{{ item.host_switches.uplink.transport_zone_endpoints }}"
          pnics:
            - device_name: "fp-eth0"
              uplink_name: "uplink-1"
    node_deployment_info:
      resource_type: EdgeNode
      deployment_config:
        form_factor: "{{ item.size }}"
        node_user_settings:
          audit_password: "{{ nsxt.manager.password }}"
          audit_username: audit
          cli_password: "{{ nsxt.manager.password }}"
          cli_username: admin
          root_password: "{{ nsxt.manager.password }}"
        vm_deployment_config:
          compute: "{{ item.cluster_name }}"
          data_networks:
            - "{{ item.network_uplink_name }}"
            - "{{ item.network_tep_name }}"
            - "{{ item.network_tep_name }}"
          default_gateway_addresses:
            - "{{ item.mgmt_default_gateway }}"
          management_network: "{{ item.network_management_name }}"
          management_port_subnets:
            - ip_addresses:
                - "{{ item.mgmt_ip_address }}"
              prefix_length: "{{ item.mgmt_prefix_length }}"
          placement_type: VsphereDeploymentConfig
          storage: "{{ item.datastore_name }}"
          vc_name: vCenter
          vc_username: "{{ nested_vcenter.username }}"
          vc_password: "{{ nested_vcenter.password }}"
      deployment_type: VIRTUAL_MACHINE
      display_name: "{{ item.display_name }}"
      node_settings:
        allow_ssh_root_login: true
        enable_ssh: true
        hostname: "{{ item.mgmt_ip_address | replace('.', '-') }}.nip.io"
        ntp_servers: ["{{ ntp_server_ip }}"]
    state: present
  async: 1800
  poll: 0
  register: edge_node_results
  # retries: 12
  # delay: 5
  # until: "'msg' not in edge_node_results"
  loop: "{{ nsxt.edge_nodes }}"

- name: Wait for VMware tools to become available
  community.vmware.vmware_guest_tools_wait:
    hostname: "{{ nested_vcenter.ip }}"
    username: "{{ nested_vcenter.username }}"
    password: "{{ nested_vcenter.password }}"
    name: "{{ item.display_name }}"
    datacenter: "{{ nested_vcenter.datacenter }}"
    validate_certs: false
  register: guest_tools_ready
  until: guest_tools_ready is not failed
  loop: "{{ nsxt.edge_nodes }}"
  retries: 180
  delay: 10

- name: Ryzen fix
  community.vmware.vmware_vm_shell:
    hostname: "{{ nested_vcenter.ip }}"
    username: "{{ nested_vcenter.username }}"
    password: "{{ nested_vcenter.password }}"
    datacenter: "{{ nested_vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ item.item.display_name }}"
    vm_username: "root"
    vm_password: "{{ nsxt.manager.password }}"
    vm_shell: /bin/bash
    vm_shell_args: |-
      -c 'if [[ -z "$(grep "MODIFIED" /opt/vmware/nsx-edge/bin/config.py)" && -n "$(grep "Ryzen" /proc/cpuinfo)" ]] ; then sed -i "192,195s/.*/### MODIFIED ###/g" /opt/vmware/nsx-edge/bin/config.py ; fi'
    vm_shell_cwd: "/root"
    wait_for_process: True
  loop: "{{ guest_tools_ready.results }}"
  when: item is not failed

- name: Result check for deployment of transport node configuration
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  loop: "{{ edge_node_results.results }}"
  retries: 180
  delay: 10
